@page "/vaults"
@using Memori.Shared
@rendermode InteractiveWebAssembly
@inject MemoriApiClient Api

<PageTitle>Vaults</PageTitle>

<h1>Memori Home</h1>

Welcome to Memori!

<h2>Vaults</h2>

@if (vaults == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>View</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vault in vaults)
            {
                <tr>
                    <td>@vault.Id</td>
                    <td>@vault.Name</td>
                    <td><button @onclick="()=>ViewVaultAsync(vault)">View</button></td>
                </tr>
            }
        </tbody>
    </table>
}


@if(vault != null)
{
    <h2>Vault @vault.Name (@vault.Id)</h2>
    <div>
        @foreach(var item in vault.Assets)
        {
            <div>
                <h3>@item.Id</h3>
                <p>@item.Url</p>
                <img src="@item.Url" />
            </div>
        }
    </div>
}

@code {
    private VaultSummaryDto[]? vaults;
    private VaultDto? vault;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("Loading vaults...", Api != null ? "Api is not null" : "Api is null");
            vaults = await Api.GetVaultsAsync();
            Console.WriteLine($"Loaded {vaults.Length} vaults");
        }
        catch(Exception ex)
        {
            Console.WriteLine("Failed to load vaults");
            Console.WriteLine(ex);
        }
    }

    private async Task ViewVaultAsync(VaultSummaryDto selected)
    {
       Console.WriteLine($"Viewing vault {selected.Id}");
       vault = await Api.GetVaultAsync(selected.Id);
    }
}